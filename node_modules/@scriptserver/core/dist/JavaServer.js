"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaServer = exports.DEFAULT_JAVA_SERVER_CONFIG = void 0;
const child_process_1 = require("child_process");
const events_1 = __importDefault(require("events"));
const lodash_get_1 = __importDefault(require("lodash.get"));
const lodash_defaultsdeep_1 = __importDefault(require("lodash.defaultsdeep"));
exports.DEFAULT_JAVA_SERVER_CONFIG = {
    jar: 'server.jar',
    args: ['-Xmx1024M', '-Xms1024M'],
    path: '.',
    pipeStdout: true,
    pipeStdin: true,
    flavorSpecific: {
        default: {
            startedRegExp: /^\[.+?\]: Done/,
            stoppedRegExp: /^\[.+?\]: ThreadedAnvilChunkStorage: All dimensions are saved$/,
        },
    },
};
class JavaServer extends events_1.default {
    constructor(config = {}) {
        super();
        this.config = lodash_defaultsdeep_1.default(config, { javaServer: exports.DEFAULT_JAVA_SERVER_CONFIG });
        this.on('console', (message) => {
            if (message.match(lodash_get_1.default(this.config, `javaServer.flavorSpecific.${this.config.flavor}.startedRegExp`, this.config.javaServer.flavorSpecific.default.startedRegExp))) {
                this.emit('start');
            }
            if (message.match(lodash_get_1.default(this.config, `javaServer.flavorSpecific.${this.config.flavor}.stoppedRegExp`, this.config.javaServer.flavorSpecific.default.stoppedRegExp))) {
                this.emit('stop');
            }
        });
    }
    start() {
        var _a, _b, _c;
        if (this.process) {
            throw new Error('JavaServer already running');
        }
        this.process = child_process_1.spawn('java', [...this.config.javaServer.args, '-jar', this.config.javaServer.jar, 'nogui'], {
            cwd: this.config.javaServer.path,
            stdio: ['pipe', 'pipe', 'pipe'],
        });
        if (this.config.javaServer.pipeStdout) {
            (_a = this.process.stdout) === null || _a === void 0 ? void 0 : _a.pipe(process.stdout);
            (_b = this.process.stderr) === null || _b === void 0 ? void 0 : _b.pipe(process.stderr);
        }
        if (this.config.javaServer.pipeStdin) {
            process.stdin.pipe(this.process.stdin);
        }
        (_c = this.process.stdout) === null || _c === void 0 ? void 0 : _c.on('data', (chunk) => {
            chunk
                .toString()
                .split('\n')
                .forEach(message => this.emit('console', message));
        });
        this.process.on('exit', () => {
            this.stop();
        });
        process.on('exit', () => {
            this.stop();
        });
    }
    stop() {
        var _a;
        (_a = this.process) === null || _a === void 0 ? void 0 : _a.kill();
        this.process = undefined;
    }
    send(message) {
        var _a;
        if (!this.process) {
            throw new Error('JavaServer not running');
        }
        (_a = this.process.stdin) === null || _a === void 0 ? void 0 : _a.write(message + '\n');
    }
}
exports.JavaServer = JavaServer;
//# sourceMappingURL=JavaServer.js.map