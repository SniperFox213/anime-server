/// <reference types="node" />
import EventsEmitter from 'events';
import { Config, DeepPartial } from './Config';
export interface JavaServerConfig {
    jar: string;
    args: string[];
    path: string;
    pipeStdout: boolean;
    pipeStdin: boolean;
    flavorSpecific: {
        [flavor: string]: {
            startedRegExp: RegExp;
            stoppedRegExp: RegExp;
        };
    };
}
declare module './Config' {
    interface Config {
        javaServer: JavaServerConfig;
    }
}
export declare const DEFAULT_JAVA_SERVER_CONFIG: JavaServerConfig;
export interface JavaServerEvents {
    console: (message: string) => void;
    start: () => void;
    stop: () => void;
}
export declare interface JavaServer {
    on<U extends keyof JavaServerEvents>(event: U, listener: JavaServerEvents[U]): this;
    emit<U extends keyof JavaServerEvents>(event: U, ...args: Parameters<JavaServerEvents[U]>): boolean;
}
export declare class JavaServer extends EventsEmitter {
    config: Config;
    private process?;
    constructor(config?: DeepPartial<Config>);
    start(): void;
    stop(): void;
    send(message: string): void;
}
//# sourceMappingURL=JavaServer.d.ts.map