/// <reference types="node" />
import EventsEmitter from 'events';
import { Config, DeepPartial } from './Config';
export interface RconConnectionConfig {
    host: string;
    port: number;
    password: string;
    buffer: number;
}
declare module './Config' {
    interface Config {
        rconConnection: RconConnectionConfig;
    }
}
export declare const DEFAULT_RCON_CONNECTION_CONFIG: RconConnectionConfig;
interface RconConnectionEvents {
    connected: () => void;
    disconnected: () => void;
}
export declare interface RconConnection {
    on<U extends keyof RconConnectionEvents>(event: U, listener: RconConnectionEvents[U]): this;
    emit<U extends keyof RconConnectionEvents>(event: U, ...args: Parameters<RconConnectionEvents[U]>): boolean;
}
export declare class RconConnection extends EventsEmitter {
    config: Config;
    private connection?;
    private authenticated;
    private queue;
    private promises;
    private execId;
    constructor(config?: DeepPartial<Config>);
    connect(retry?: boolean): void;
    disconnect(): void;
    send(message: string): Promise<string>;
    private listen;
    private tick;
    private getNextExecId;
}
export {};
//# sourceMappingURL=RconConnection.d.ts.map